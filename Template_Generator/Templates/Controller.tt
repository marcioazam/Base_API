<#@ template language="C#" hostspecific="true"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="Configuration\TemplateConfig.ttinclude" #>
<#@ import namespace="System.Diagnostics" #>
<#
    if (string.IsNullOrEmpty(solutionDir))
    {
        Debug.WriteLine($"[Erro] Diretório da solução '{solutionDirName}' não encontrado a partir de '{templateDir}'.");
    }
    else if(executarTemplate)
    {
     // Definir o diretório de saída relativo à solução
       string outputDir = Path.Combine(solutionDir, "API", "Controllers");

        // Nome do arquivo baseado na entidade
        string fileName = entityName + "Controller.cs";

        // Caminho completo do arquivo
        string outputPath = Path.Combine(outputDir, fileName);

    // Verificar se o diretório existe, se não, criar
    if (!Directory.Exists(outputDir))
    {
        Directory.CreateDirectory(outputDir);
    }

    // Verificar se o arquivo já existe
    if (!File.Exists(outputPath))
    {

         // Definir os 'using' a serem adicionados
            string usings = $@"using API.Controllers.Extension;
using Application.DTOs.Entities;
using Application.DTOs.Filters;
using Application.Interfaces.Services;
using Domain.Commands.{entityName}Commands;
using Domain.Entities;
using MediatR;
using Microsoft.AspNetCore.Mvc;";

            // Iniciar o conteúdo do arquivo
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(usings);
            sb.AppendLine();
            sb.AppendLine($"namespace API.Controllers");
            sb.AppendLine("{");
            sb.AppendLine($"     [ApiController]");
            sb.AppendLine("     [Route(\"[controller]\")]");
            sb.AppendLine($"     public class {entityName}Controller(I{entityName}Service {entityName}Service, IMediator mediator) : ControllerExtension");
            sb.AppendLine($"         <{entityName}InsertCommand, {entityName}UpdateCommand, {entityName}DeleteCommand, {entityName}FilterDTO, {entityName}ListDTO, {entityName}ListDTO, {entityName}>");
            sb.AppendLine($"         (mediator, {entityName}Service)");
            sb.AppendLine("    {");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            string fileContent = sb.ToString();

            int lastNewLineIndex = fileContent.LastIndexOf(Environment.NewLine);

            if (lastNewLineIndex != -1)
            {
                sb.Remove(lastNewLineIndex, fileContent.Length - lastNewLineIndex);
            }

            fileContent = sb.ToString();

            try
            {
                // Gravar o arquivo
                File.WriteAllText(outputPath, fileContent);
                Debug.WriteLine($"[Info] Arquivo '{fileName}' criado com sucesso em '{outputDir}'.");
            }
            catch (Exception ex)
            {
                // Logar erro caso a escrita falhe
                Debug.WriteLine($"[Erro] Erro ao criar o arquivo '{fileName}': {ex.Message}");
            }
        }
    }
#>