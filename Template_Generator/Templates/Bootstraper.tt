<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="Configuration\TemplateConfig.ttinclude" #>
<#@ import namespace="System.Diagnostics" #>
<#

 if (string.IsNullOrEmpty(solutionDir))
    {
        Debug.WriteLine($"[Erro] Diretório da solução '{solutionDirName}' não encontrado a partir de '{templateDir}'.");
    }
    else if(executarTemplate)
    {
    // Verificar se entityName foi definido
    if (string.IsNullOrEmpty(entityName))
    {
        this.Errors.Add(new CompilerError(null, 0, 0, null, "A variável entityName não foi definida no arquivo DependencyName.ttinclude."));
    }
    // Definir o diretório de saída relativo à solução
        string outputDir = Path.Combine(solutionDir, "Infrastructure");

        // Nome do arquivo baseado na entidade
        string fileName = "Bootstrapper.cs";

        // Caminho completo do arquivo
        string outputPath = Path.Combine(outputDir, fileName);

    // Verificar se o arquivo existe
    if (File.Exists(outputPath))
    {
        // Ler o conteúdo atual do arquivo
        string originalContent = File.ReadAllText(outputPath);

        // Definir o 'using' a ser adicionado
        string newUsing = $"using Domain.Commands.{entityName}Commands;";

        // Lista de novas dependências com a marcação [NOME]
        var newDependenciesTemplate = new List<string>
        {
            $"// {entityName}",
            $"services.AddTransient<IRequestHandler<{entityName}InsertCommand, Result>, BaseInsertHandler<{entityName}, {entityName}InsertCommand>>();",
            $"services.AddTransient<IRequestHandler<{entityName}UpdateCommand, Result>, BaseUpdateHandler<{entityName}, {entityName}UpdateCommand>>();",
            $"services.AddTransient<IRequestHandler<{entityName}DeleteCommand, Result>, BaseDeleteHandler<{entityName}, {entityName}DeleteCommand>>();",
            $"services.AddTransient<IRepositoryBase<{entityName}>, {entityName}Repository>();",
            $"services.AddTransient<I{entityName}Repository, {entityName}Repository>();",
            $"services.AddTransient<I{entityName}Service, {entityName}Service>();",
            $"services.AddTransient<IValidator<{entityName}>, {entityName}Validator>();"
        };

        // Expressão regular para localizar os 'using' no início do arquivo
        var usingRegex = new Regex(@"^(using\s+[^\s;]+;\s*$)+", RegexOptions.Multiline);

        var usingMatch = usingRegex.Match(originalContent);

        string usingsSection = usingMatch.Success ? usingMatch.Value : "";
        string restOfFile = originalContent.Substring(usingsSection.Length);

        // Verificar se o 'using' já existe
        if (!usingsSection.Contains(newUsing))
        {
            // Inserir o novo 'using' em ordem alfabética
            var usingsList = usingsSection.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            usingsList.Add(newUsing);
            usingsList = usingsList.Distinct().OrderBy(u => u).ToList();

            // Recriar a seção de 'using's
            usingsSection = string.Join("\n", usingsList);
        }
        else
        {
                     var warning = new CompilerError(null, 0, 0, null, $"O using '{entityName}' já existe. Nenhuma ação foi tomada.");
                    warning.IsWarning = true; // Define como aviso
                    this.Errors.Add(warning);
        }

        // Atualizar o conteúdo do arquivo com os novos 'using's
        originalContent = usingsSection + restOfFile;

        // Expressão regular para localizar o método AddDependencies
        var regex = new Regex(
            @"(public\s+static\s+void\s+AddDependencies\s*\(\s*this\s+IServiceCollection\s+services\s*\)\s*\{)([\s\S]*?)(^\s*\}\s*$)",
            RegexOptions.Multiline);

        var match = regex.Match(originalContent);

        if (match.Success)
        {
            // Capturar as partes do método
            string methodStart = match.Groups[1].Value;
            string methodBody = match.Groups[2].Value;
            string methodEnd = match.Groups[3].Value;

            string ajustTab = "\n            ";

            // Iterar sobre a lista de dependências
            foreach (var dependency in newDependenciesTemplate)
            {
                // Verificar se a dependência já existe para evitar duplicações
                if (!methodBody.Contains(dependency))
                {
                    // Inserir a nova dependência
                    methodBody += ajustTab + dependency;
                }
                else
                {
                    var warning = new CompilerError(null, 0, 0, null, $"A Dependencia '{dependency}' já existe. Nenhuma ação foi tomada.");
                    warning.IsWarning = true; // Define como aviso
                    this.Errors.Add(warning);
                }
            }

            // Adicionar uma linha em branco no final do método, se necessário
            if (methodBody != match.Groups[2].Value)
            {
                methodBody += "\n";
            }

            // Reunir o conteúdo modificado
            string modifiedContent = originalContent.Substring(0, match.Index) +
                                     methodStart + methodBody + methodEnd +
                                     originalContent.Substring(match.Index + match.Length);

            // Gravar o arquivo modificado
            File.WriteAllText(outputPath, modifiedContent);
        }
        else
        {
            // Reportar erro se o método não for encontrado
            this.Errors.Add(new CompilerError(null, 0, 0, null, "Método AddDependencies não encontrado no arquivo Bootstrapper.cs."));
        }
    }
    else
    {
        // Reportar erro se o arquivo não for encontrado
        this.Errors.Add(new CompilerError(null, 0, 0, null, $"Arquivo '{outputPath}' não encontrado."));
    }
    }
#>