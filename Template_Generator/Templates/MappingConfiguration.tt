<#@ template language="C#" hostspecific="true"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="Configuration\TemplateConfig.ttinclude" #>
<#@ include file="Configuration\PropertyTableDefinition.ttinclude" #>
<#@ import namespace="System.Diagnostics" #>
<#
    if (string.IsNullOrEmpty(solutionDir))
    {
        Debug.WriteLine($"[Erro] Diretório da solução '{solutionDirName}' não encontrado a partir de '{templateDir}'.");
    }
    else if(executarTemplate)
    {
        // Definir o diretório de saída relativo à solução
        string outputDir = Path.Combine(solutionDir, "Infrastructure", "Context", "Mappings");

        // Nome do arquivo baseado na entidade
        string fileName = entityName + "Configuration.cs";

        // Caminho completo do arquivo
        string outputPath = Path.Combine(outputDir, fileName);

        // Verificar se o arquivo já existe
        if (File.Exists(outputPath))
        {
            Debug.WriteLine($"[Info] Arquivo '{fileName}' já existe em '{outputDir}'. Nenhuma ação foi tomada.");
        }
        else
        {
            // Inicializar o StringBuilder para construir o conteúdo do arquivo
            StringBuilder sb = new StringBuilder();

            // Adicionar os 'using' necessários
            sb.AppendLine("using Microsoft.EntityFrameworkCore.Metadata.Builders;");
            sb.AppendLine("using Microsoft.EntityFrameworkCore;");
            sb.AppendLine("using Infrastructure.Context.Tables;");
            sb.AppendLine();

            // Definir o namespace
            sb.AppendLine("namespace Infrastructure.Context.Mappings");
            sb.AppendLine("{");

            // Definir a classe de configuração
            sb.AppendLine($"    public class {entityName}Configuration : IEntityTypeConfiguration<{entityName}Table>");
            sb.AppendLine("    {");

            // Definir o método Configure
            sb.AppendLine($"        public void Configure(EntityTypeBuilder<{entityName}Table> builder)");
            sb.AppendLine("        {");

            // Adicionar as configurações específicas
            sb.AppendLine($"            builder.ToTable(\"{entityName}\");");
            sb.AppendLine();
            sb.AppendLine($"            builder.HasKey(nameof({entityName}Table.Id));");
            sb.AppendLine();
            sb.AppendLine($"            builder.Property(x => x.Id).UseIdentityColumn();");

            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");

             string fileContent = sb.ToString();

            int lastNewLineIndex = fileContent.LastIndexOf(Environment.NewLine);

            if (lastNewLineIndex != -1)
            {
                sb.Remove(lastNewLineIndex, fileContent.Length - lastNewLineIndex);
            }

            fileContent = sb.ToString();

            try
            {
                // Gravar o arquivo
                File.WriteAllText(outputPath, fileContent);
                Debug.WriteLine($"[Info] Arquivo '{fileName}' criado com sucesso em '{outputDir}'.");
            }
            catch (Exception ex)
            {
                // Logar erro caso a escrita falhe
                Debug.WriteLine($"[Erro] Erro ao criar o arquivo '{fileName}': {ex.Message}");
            }
      }
    }
#>