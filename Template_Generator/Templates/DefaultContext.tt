<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ include file="Configuration\TemplateConfig.ttinclude" #>
<#@ import namespace="System.Diagnostics" #>
<#
 if (string.IsNullOrEmpty(solutionDir))
    {
        Debug.WriteLine($"[Erro] Diretório da solução '{solutionDirName}' não encontrado a partir de '{templateDir}'.");
    }
    else if(executarTemplate)
    {
        // Definir o diretório de saída relativo à solução
        string outputDir = Path.Combine(solutionDir, "Infrastructure", "Context");

        // Nome do arquivo a modificar
        string fileName = "DefaultContext.cs";

        // Caminho completo do arquivo
        string outputPath = Path.Combine(outputDir, fileName);

        // Definir a propriedade DbSet<> a ser adicionada
        string newDbSet = $"\n        public DbSet<{entityName}Table> {entityName} {{ get; set; }}";

        // Verificar se o arquivo existe
        if (File.Exists(outputPath))
        {
            // Ler o conteúdo atual do arquivo
            string originalContent = File.ReadAllText(outputPath);

            // Verificar se a propriedade DbSet<> já existe
            var dbSetExists = originalContent.Contains(newDbSet);

            if (dbSetExists)
            {
                 var warning = new CompilerError(null, 0, 0, null, $"A classe '{entityName}' já existe. Nenhuma ação foi tomada.");
                    warning.IsWarning = true; // Define como aviso
                    this.Errors.Add(warning);
            }
            else
            {
                // Expressão regular para localizar as propriedades DbSet<>
                var dbSetRegex = new Regex(@"public\s+DbSet<\w+Table>\s+\w+\s*\{\s*get;\s*set;\s*\}", RegexOptions.Multiline);

                // Encontrar todas as correspondências de DbSet<>
                var dbSetMatches = dbSetRegex.Matches(originalContent).Cast<Match>().ToList();

                if (dbSetMatches.Count > 0)
                {
                    // Encontrar a posição após o último DbSet<>
                    var lastMatch = dbSetMatches.Last();
                    int insertPosition = lastMatch.Index + lastMatch.Length;
                      
                    originalContent = originalContent.Insert(insertPosition, "\n        " + newDbSet);

                    // Inserir a nova linha após o último DbSet<>
                    string modifiedContent = originalContent;

                    try
                    {
                        // Gravar o arquivo modificado
                        File.WriteAllText(outputPath, modifiedContent);
                        Debug.WriteLine($"[Info] DbSet<{entityName}Table> adicionado ao arquivo '{fileName}'.");
                    }
                    catch (Exception ex)
                    {
                        // Logar erro caso a escrita falhe
                        Debug.WriteLine($"[Erro] Erro ao adicionar DbSet<{entityName}Table> ao arquivo '{fileName}': {ex.Message}");
                    }
                }
                else
                {
                    // Se nenhum DbSet<> for encontrado, inserir após a declaração da classe
                    var classEndRegex = new Regex(@"public\s+class\s+\w+\s*:\s*\w+\s*\{", RegexOptions.Multiline);
                    var classEndMatch = classEndRegex.Match(originalContent);

                    if (classEndMatch.Success)
                    {
                        // Posição para inserir a nova propriedade DbSet<>
                        int insertPosition = classEndMatch.Index + classEndMatch.Length;

                        // Inserir a nova linha após a declaração da classe
                        string modifiedContent = originalContent.Insert(insertPosition, "\n        " + newDbSet + "\n");

                        try
                        {
                            // Gravar o arquivo modificado
                            File.WriteAllText(outputPath, modifiedContent);
                            Debug.WriteLine($"[Info] DbSet<{entityName}Table> adicionado ao arquivo '{fileName}'.");
                        }
                        catch (Exception ex)
                        {
                            // Logar erro caso a escrita falhe
                            Debug.WriteLine($"[Erro] Erro ao adicionar DbSet<{entityName}Table> ao arquivo '{fileName}': {ex.Message}");
                        }
                    }
                    else
                    {
                        // Não foi possível encontrar onde inserir o DbSet<>
                        Debug.WriteLine($"[Erro] Não foi possível encontrar o local para adicionar DbSet<{entityName}Table> no arquivo '{fileName}'.");
                    }
                }
            }
        }
        else
        {
            Debug.WriteLine($"[Erro] Arquivo '{outputPath}' não encontrado.");
        }
    }
#>
