<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ include file="Configuration\TemplateConfig.ttinclude" #>
<#
    if (string.IsNullOrEmpty(solutionDir))
    {
        Debug.WriteLine($"[Erro] Diretório da solução '{solutionDirName}' não encontrado a partir de '{templateDir}'.");
    }
    else if(executarTemplate)
    {
        // Definir o diretório de saída relativo à solução
        string outputDir = Path.Combine(solutionDir, "Infrastructure", "Mappers", "Profiles");

        // Nome do arquivo baseado na entidade
        string fileName = entityName + "MapperProfile.cs";

        // Caminho completo do arquivo
        string outputPath = Path.Combine(outputDir, fileName);

        // Definir o 'using' a ser adicionado
        string newUsing = $"using Domain.Commands.{entityName}sCommands;";

        // Verificar se o diretório existe, se não, criar
        if (!Directory.Exists(outputDir))
        {
            Directory.CreateDirectory(outputDir);
            Debug.WriteLine($"[Info] Diretório '{outputDir}' criado.");
        }

        // Verificar se o arquivo já existe
        if (!File.Exists(outputPath))
        {
            // Conteúdo do arquivo com o 'using' adicionado
            string fileContent = $@"using Application.DTOs.Entities;
{newUsing}
using Domain.Entities;
using Infrastructure.Context.Tables;

namespace Infrastructure.Mappers.Profiles
{{
    internal class {entityName}MapperProfile : ProfileBase
    {{
        public {entityName}MapperProfile()
        {{
            CreateMap<{entityName}Table, {entityName}>().ReverseMap();

            CreateMap<{entityName}Table, {entityName}ListDTO>();

            CreateMap<{entityName}InsertCommand, {entityName}>();

            CreateMap<{entityName}UpdateCommand, {entityName}>();
        }}
    }}
}}";

            try
            {
                // Gravar o arquivo
                File.WriteAllText(outputPath, fileContent);
                Debug.WriteLine($"[Info] Arquivo '{fileName}' criado com sucesso em '{outputDir}'.");
            }
            catch (Exception ex)
            {
                // Logar erro caso a escrita falhe
                Debug.WriteLine($"[Erro] Erro ao criar o arquivo '{fileName}': {ex.Message}");
            }
        }
        else
        {
            // Logar que o arquivo já existe
            Debug.WriteLine($"[Info] Arquivo '{fileName}' já existe em '{outputDir}'. Nenhuma ação foi tomada.");
        }
    }
#>
