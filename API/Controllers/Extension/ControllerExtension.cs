using API.Interfaces;
using Domain.Commands.Supplier;
using Domain.Helpers;
using Domain.Interfaces.ValueObjects;
using Domain.ValueObjects.ResultInfo;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace API.Controllers.Extension
{
    public class ControllerExtension<TInsertCommand>(IMediator mediator) : ControllerBase
        where TInsertCommand : IRequest<Result>
    {
        private readonly IMediator _mediator = mediator;

        [HttpPost]
        public virtual async Task<IActionResult> Post(TInsertCommand command)
        {
            return await MediatorSend(command, ResponseStatus.Created);
        }

        [HttpPut]
        public virtual async Task<IActionResult> Update(SupplierUpdateCommand command)
        {
            return await MediatorSend(command, ResponseStatus.NoContent);
        }

        [HttpDelete]
        public virtual async Task<IActionResult> Delete(SupplierDeleteCommand command)
        {
            return await MediatorSend(command, ResponseStatus.NoContent);
        }

        [NonAction]
        public async Task<IActionResult> MediatorSend<TCommand>(TCommand command, ResponseStatus responseStatus) where TCommand : IRequest<Result>
        {
            Result result = await _mediator.Send(command);

            return BuildResult(result, responseStatus);
        }

        [NonAction]
        public IActionResult BuildResult(Result result, ResponseStatus responseStatus, string routeGet = "Get")
        {
            // Bad request 400
            if (result.Failed())
            {
                return BadRequest(result.Errors);
            }

            switch (responseStatus)
            {
                case ResponseStatus.NoContent:
                    return NoContent();

                case ResponseStatus.Created:
                    if (result.Data is IAutoGeneratedValue autoGenValue)
                    {
                        return CreatedAtAction(routeGet, new { id = autoGenValue.Id }, autoGenValue.Id);
                    }
                    return BadRequest("Data de criação inválida.");

                case ResponseStatus.Ok:
                    return Ok(result.Data);

                default:
                    return Ok(result.Data);
            }
        }
    }
}
